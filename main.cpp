//я научился удалять репозитории

//mkdir name_directory создает директорию
//echo 'commit text' > newcpp.cpp  создает файл
//cd C:\git\namedirectory сменить директорию, где сейчас находишься
//очистка консоли - clear

//Как добавлять файлы в индексирование гита:
//git add main.cpp - добавление изменений в индекс отдельного файла
//git add -p добавление лишь части изменений в индекс
//добавлять файлы, даже те, которые указаны в .gitignore
//git add --force (-f) принудительно добавление изменений
//Добавлять новую папку (можно только при условии, что в папке лежит какой либо файл)
//git add. (добавляет все изменения в каталог)
//Убрать файл из индекса
//git reset put_k_file.cpp
//Сбросить изменения в файле до добавления в индекс
//git checkout HEAD put_k_file.cpp

//Как переносить файлы из индекса в репозиторий (коммитить)
//git commit - коммитим в открывшемся окне текстового редактора
//git commit -m 'obyasneniye kommita' - коммитим сразу в консоли
//git commit -am 'komment kommita' добавляет сразу коммит через индекс одной командой
//git diff --staged покажет до комита, что изменено в файле
//git show r6546453 (номер коммита) - просмотр изменений в коммите.
//вместо номе5ра коммита можно написать название ветки. Если мы хотим посмотреть предидущий
//коммит, то можно написать так 
//git show HEAD~

//удаление файлов
//физически удаляем файл из дирректории, далее через git add добавляем факт удаления файла
//после чего комитим изменения
//Удаление через git rm -r 'название директории'
//тоже самое с флагом --cached для удаления файла только из индекса (оставляя фатически файл)
//что бы убрать директорию из индекса но оставить ее в рабочем каталоге используем --cached

//Восстановить незакоммиченые удаленные файлы 
//git restore 'papka/file.cpp'
//Восстановление состояния отдельного фала на момент какого - то конкретного коммита
//git checkout nomerkommita put_k_file.cpp
//после чего востановленный файл гит добавит в индекс

//Указание автора коммита
//git commit --authotr = 'vasya'
//git commit --date = '...'

//Как создавать юзера в гит
//git config user.name - юзер
//git config user.email - мыло юзера

//Настройки для разных уровней приватности как я понял:
//--local - локальные, -global - глобальные, --system - на уровне системы

//научился удалять юзеров:
//git config --unset
//git config --remove -section user

//Просмотр настроек репозитория
//git config --list
//Просмотр файлов репозитория через гит:
//ls
//Просмотр состояния файлов в гите:
//git status

//настраивать короткие команды в гите
//git config --global alias.c config
//это заменит приравняет команду git config к git c

//убирать файлы редактора из репозитория
//git reset HEAD .vscode
//создавать правило игнорирования файлов через файл .gitignore

//Ветки - важная инфа
//на каком то этапе проекта решили добавить фичу, скопировали все файлы проекта в новую ветку
//тестируем фичу в ней. Если фича зашла - сливаем с основной веткой разработки, если нет - 
//удаляем ветку с фичей.

//просмотр всех веток
//git branch nazvaniyeVetki
//просмотр веток с коммитами
//git branch -v

//переключение между ветками
//git checkout 
//сразу и создание и переключение на новую ветку
//git checkout -b novayaVetv
//Если мы находимся в главной ветке, сделали незакомиченные изменения, и нам нельзя сохранить их
//в главную ветку - то просто создаем новую ветку до коммита, и коммитим изменения в новой ветке. 

//переключаться между ветками можно лишь отменив изменения:
//git checkout -f nazvaniyeVetki - перезапись версией файлов из указанной ветки)
//второй вариант - изменения можно сохранить во временный файл
//git stash
//для загрузки данных из временного хранилища
//git stash pop (важно применять на той же ветке, где мы его и делали, не запутаться)
//после этого надо добавить файлы в индекс и закомитить их

//Как мерджить ветки (сливать в мэйн/мастер)
//git checkout main - переходим в ветку, куда будем все сливать
//при этом все изменения должны быть замерджены в обеих ветках и сохранены
//git merge new_branch - мерджим ветку
//git push origin master - заливаем изменения
//git branch -d news - удаляем ветку из которой залили инфу

//посмотреть все изменения в ветках
//git loggit 
//Показать последнее изменение
//git log -1
//Показать последний коммит с описанием изменений
//git log -1 -p

//Проблема 1 - закомитили изменения в мастер - ветке и мастер надо откатить на пару коммитов назад
//а изменения сохранить в новой ветке:
//1)создаем новую ветку на текущем коммите git branch newVetka
//2)Переходим на newVetka
//3)Создаем мастер ветку с указанием требуемого последнего коммита git branch -f master 543g43
//4)Если все надо вернуть назад: git branch -f master newVetka

//Так же разделение после создания новой ветки можно сделать командой: git checkout -B master nomerKommita

//Проблема 2 - когда мы переходим из newVetka в мастер- ветку, и хэд коммит у нас находится до
//последнего коммита в мастер ветке. Гит начинает ругаться, это состояние отделенный HEAD
//Если мы закомитим в этом состоянии изменения - то комиты будут без ветки, и эти коммиты гит чистит
//Через время. Для этих коммитов требуется создать отдельную ветку 
//git branch newnewvetka nomerkommita
//Так же такие коммиты можно скопировать на текущую ветку командой 
//git cherry-pick nomerkommita

//Проблема 3 - восстановление ветки